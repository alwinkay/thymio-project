<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="0" name="STOPPED"/>
<constant value="1" name="LEFT"/>
<constant value="2" name="RIGHT"/>
<constant value="3" name="BLOCKED"/>
<constant value="300" name="EDGE"/>
<constant value="300" name="TARGET"/>
<constant value="1500" name="THRESHOLD"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II"># -----------------------------------
# Midterm Project 
# -----------------------------------
# Group 6:
# Cole Smith-Evans 	B00903345
# Cynthia Hayes 		B01051658
# Alwin Tenkorang 	B01014380
# Nathan Ikeme 		B01059341
# -----------------------------------
var state = STOPPED
var min
var max
var mean

motor.left.target = 0
motor.right.target = 0

onevent button.forward state = LEFT
onevent button.backward
  	state = STOPPED
  	motor.left.target = 0
  	motor.right.target = 0
	
onevent prox
	# horizontal sensors detect blocks
	call math.stat( prox.horizontal[0:4], min, max, mean )
  
	if state != STOPPED then
		
		# basic line follow states
		if state == LEFT or state == RIGHT then
			if max > THRESHOLD then
	  			state = BLOCKED
	  			motor.left.target = 0
	  			motor.right.target = 0
  			end
  		end
  		
  		# block detection logic
	  	if state == BLOCKED  and max &lt;= THRESHOLD then
	  		
	  		# move to right state after unblocked
		  	if prox.ground.delta[0] >= EDGE then
		      state = RIGHT
		      motor.left.target = TARGET
		      motor.right.target = 0
		   end
			
			# move to left state after unblocked
		   if prox.ground.delta[0] &lt; EDGE then
	      	state = LEFT
	      	motor.left.target = 0
	      	motor.right.target = TARGET
	    	end
	  	end
  		
  		# move to right state from left
	  	if state == LEFT and  prox.ground.delta[0] >= EDGE then
	   	state = RIGHT
	      motor.left.target = TARGET
	      motor.right.target = 0
	   end
	   
	   # move to left state from right
	   if state == RIGHT and prox.ground.delta[0] &lt; EDGE then
	      state = LEFT
	      motor.left.target = 0
	      motor.right.target = TARGET
	   end    
	end

</node>


</network>
