<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="0" name="STOPPED"/>
<constant value="1" name="LEFT"/>
<constant value="2" name="RIGHT"/>
<constant value="3" name="BLOCKED"/>
<constant value="300" name="EDGE"/>
<constant value="300" name="TARGET"/>
<constant value="500" name="THRESHOLD"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">var state = STOPPED                          # variable declarations
var min
var max
var mean

motor.left.target = 0                        # reset motors
motor.right.target = 0

onevent button.forward                       # on forward button press
  state = LEFT                               # transition to LEFT state

onevent button.backward                      # on backward button press
  state = STOPPED                            # transition to STOPPED state
  motor.left.target = 0                      # stop motors
  motor.right.target = 0
	
onevent prox                                 # on prox event
  call math.stat( prox.horizontal[0:4], min, max, mean )
  
  if state != STOPPED then 
  # stop if the robot senses an object
  	if state == LEFT or state == RIGHT then
  		if max > THRESHOLD then
  			state = BLOCKED
  			motor.left.target = 0
  			motor.right.target = 0
  		end
  	end
  	
  	# if the blockage is removed
  	if state == BLOCKED  and max &lt;= THRESHOLD then
  	# checks if the ground sensor is greater or equal to the EDGE constant.
  	# if it is, transition to the RIGHT state.
	  	if prox.ground.delta[0] >= EDGE then
	      state = RIGHT                          #  transition to RIGHT state
	      motor.left.target = TARGET             #  move right
	      motor.right.target = 0
	    end
	
	# checks if the ground sensor is less than the EDGE constant.
	# if it is, transition to the LEFT state. If it makes it to this
	# point in the code it should transition to the LEFT state regardless,
	# but this matches the state diagram.
	   if prox.ground.delta[0] &lt; EDGE then
      	state = LEFT                           #  transition to LEFT state
      	motor.left.target = 0                  #  move left
      	motor.right.target = TARGET
    	end
  	end
    # if robot is moving
    # if the robot is moving left and it no longer senses a black line,
    # move over to the RIGHT state.
    if state == LEFT and  prox.ground.delta[0] >= EDGE then
      state = RIGHT                          #  transition to RIGHT state
      motor.left.target = TARGET             #  move right
      motor.right.target = 0
    end
    
    # if the robot is moving right and it no longer senses a black line,
    # move over to the LEFT state.
    if state == RIGHT and prox.ground.delta[0] &lt; EDGE then
      state = LEFT                           #  transition to LEFT state
      motor.left.target = 0                  #  move left
      motor.right.target = TARGET
    end    
  end

</node>


</network>
